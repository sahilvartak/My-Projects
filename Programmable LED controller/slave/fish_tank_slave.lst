;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 28-Mar-16 9:23:40 PM
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x2922      	GOTO       290
_interrupt:
;Slave.c,37 :: 		void interrupt(){                      // I2C slave interrupt handler
0x0004	0x0870      	MOVF       R0, 0
0x0005	0x0020      	MOVLB      0
0x0006	0x00A1      	MOVWF      33
0x0007	0x0871      	MOVF       R1, 0
0x0008	0x00A0      	MOVWF      32
;Slave.c,39 :: 		if (PIR1.SSP1IF == 1){                // I2C Interrupt
0x0009	0x3180      	MOVLP      0
0x000A	0x1D91      	BTFSS      PIR1, 3
0x000B	0x284C      	GOTO       L_interrupt0
;Slave.c,41 :: 		PIR1.SSP1IF = 0;                    // reset SSP interrupt flag
0x000C	0x1191      	BCF        PIR1, 3
;Slave.c,44 :: 		if ((SSPSTAT>>2)&1 == 1){             // Read request from master
0x000D	0x0024      	MOVLB      4
0x000E	0x0814      	MOVF       SSPSTAT, 0
0x000F	0x00F1      	MOVWF      R1
0x0010	0x36F1      	LSRF       R1, 1
0x0011	0x36F1      	LSRF       R1, 1
0x0012	0x1C71      	BTFSS      R1, 0
0x0013	0x281D      	GOTO       L_interrupt1
;Slave.c,45 :: 		SSPBUF = tx_data;                // Get data to send
0x0014	0x0020      	MOVLB      0
0x0015	0x0826      	MOVF       _tx_data, 0
0x0016	0x0024      	MOVLB      4
0x0017	0x0091      	MOVWF      SSPBUF
;Slave.c,46 :: 		SSPCON.CKP = 1;                  // Release SCL line
0x0018	0x1615      	BSF        SSPCON, 4
;Slave.c,47 :: 		j = SSPBUF;                      // That's it
0x0019	0x0811      	MOVF       SSPBUF, 0
0x001A	0x0020      	MOVLB      0
0x001B	0x00A3      	MOVWF      _j
;Slave.c,48 :: 		return;
0x001C	0x2850      	GOTO       L__interrupt15
;Slave.c,49 :: 		}
L_interrupt1:
;Slave.c,50 :: 		if (SSPSTAT&1 == 0){              // all done,
0x001D	0x3000      	MOVLW      0
0x001E	0x0024      	MOVLB      4
0x001F	0x0514      	ANDWF      SSPSTAT, 0
0x0020	0x00F0      	MOVWF      R0
0x0021	0x1903      	BTFSC      STATUS, 2
0x0022	0x2827      	GOTO       L_interrupt2
;Slave.c,51 :: 		j = SSPBUF;                      // Nothing in buffer so exit
0x0023	0x0811      	MOVF       SSPBUF, 0
0x0024	0x0020      	MOVLB      0
0x0025	0x00A3      	MOVWF      _j
;Slave.c,52 :: 		return;
0x0026	0x2850      	GOTO       L__interrupt15
;Slave.c,53 :: 		}
L_interrupt2:
;Slave.c,56 :: 		if ((SSPSTAT>>5)&1 == 1){             // Data [not address]
0x0027	0x3005      	MOVLW      5
0x0028	0x00F0      	MOVWF      R0
0x0029	0x0024      	MOVLB      4
0x002A	0x0814      	MOVF       SSPSTAT, 0
0x002B	0x00F1      	MOVWF      R1
0x002C	0x0870      	MOVF       R0, 0
L__interrupt16:
0x002D	0x1903      	BTFSC      STATUS, 2
0x002E	0x2832      	GOTO       L__interrupt17
0x002F	0x36F1      	LSRF       R1, 1
0x0030	0x3EFF      	ADDLW      255
0x0031	0x282D      	GOTO       L__interrupt16
L__interrupt17:
0x0032	0x1C71      	BTFSS      R1, 0
0x0033	0x284C      	GOTO       L_interrupt3
;Slave.c,57 :: 		rxbuff[pos] = SSPBUF;                         // get addr
0x0034	0x3024      	MOVLW      _rxbuff
0x0035	0x0086      	MOVWF      FSR1
0x0036	0x3000      	MOVLW      hi_addr(_rxbuff)
0x0037	0x0087      	MOVWF      FSR1H
0x0038	0x0020      	MOVLB      0
0x0039	0x0822      	MOVF       _pos, 0
0x003A	0x0786      	ADDWF      FSR1, 1
0x003B	0x1803      	BTFSC      STATUS, 0
0x003C	0x0A87      	INCF       FSR1H, 1
0x003D	0x0024      	MOVLB      4
0x003E	0x0811      	MOVF       SSPBUF, 0
0x003F	0x0081      	MOVWF      INDF1
;Slave.c,58 :: 		pos++;
0x0040	0x0020      	MOVLB      0
0x0041	0x0AA2      	INCF       _pos, 1
;Slave.c,59 :: 		if(pos>1) pos=0;
0x0042	0x0822      	MOVF       _pos, 0
0x0043	0x3C01      	SUBLW      1
0x0044	0x1803      	BTFSC      STATUS, 0
0x0045	0x2847      	GOTO       L_interrupt4
0x0046	0x01A2      	CLRF       _pos
L_interrupt4:
;Slave.c,60 :: 		j = SSPBUF;                 // read buffer to clear flag [address]
0x0047	0x0024      	MOVLB      4
0x0048	0x0811      	MOVF       SSPBUF, 0
0x0049	0x0020      	MOVLB      0
0x004A	0x00A3      	MOVWF      _j
;Slave.c,61 :: 		return;
0x004B	0x2850      	GOTO       L__interrupt15
;Slave.c,62 :: 		}
L_interrupt3:
;Slave.c,63 :: 		}
L_interrupt0:
;Slave.c,64 :: 		j = SSPBUF;                              // read buffer to clear flag [address]
0x004C	0x0024      	MOVLB      4
0x004D	0x0811      	MOVF       SSPBUF, 0
0x004E	0x0020      	MOVLB      0
0x004F	0x00A3      	MOVWF      _j
;Slave.c,65 :: 		}
L_end_interrupt:
L__interrupt15:
0x0050	0x0821      	MOVF       33, 0
0x0051	0x00F0      	MOVWF      R0
0x0052	0x0820      	MOVF       32, 0
0x0053	0x00F1      	MOVWF      R1
0x0054	0x0009      	RETFIE     %s
; end of _interrupt
_PWM1_Init:
;__Lib_PWM_150x.c,1 :: 		
;__Lib_PWM_150x.c,3 :: 		
0x0055	0x0021      	MOVLB      1
0x0056	0x168E      	BSF        TRISC5_bit, BitPos(TRISC5_bit+0)
;__Lib_PWM_150x.c,4 :: 		
0x0057	0x002C      	MOVLB      12
0x0058	0x0193      	CLRF       PWM1CON
;__Lib_PWM_150x.c,6 :: 		
0x0059	0x0192      	CLRF       PWM1DCH
;__Lib_PWM_150x.c,7 :: 		
0x005A	0x1311      	BCF        PWM1DCL0_bit, BitPos(PWM1DCL0_bit+0)
;__Lib_PWM_150x.c,8 :: 		
0x005B	0x1391      	BCF        PWM1DCL1_bit, BitPos(PWM1DCL1_bit+0)
;__Lib_PWM_150x.c,9 :: 		
L_end_PWM1_Init:
0x005C	0x0008      	RETURN
; end of _PWM1_Init
_PWM2_Init:
;__Lib_PWM_150x.c,28 :: 		
;__Lib_PWM_150x.c,30 :: 		
0x005D	0x0021      	MOVLB      1
0x005E	0x158E      	BSF        TRISC3_bit, BitPos(TRISC3_bit+0)
;__Lib_PWM_150x.c,31 :: 		
0x005F	0x002C      	MOVLB      12
0x0060	0x0196      	CLRF       PWM2CON
;__Lib_PWM_150x.c,33 :: 		
0x0061	0x0195      	CLRF       PWM2DCH
;__Lib_PWM_150x.c,34 :: 		
0x0062	0x1314      	BCF        PWM2DCL0_bit, BitPos(PWM2DCL0_bit+0)
;__Lib_PWM_150x.c,35 :: 		
0x0063	0x1394      	BCF        PWM2DCL1_bit, BitPos(PWM2DCL1_bit+0)
;__Lib_PWM_150x.c,36 :: 		
L_end_PWM2_Init:
0x0064	0x0008      	RETURN
; end of _PWM2_Init
_PWM3_Start:
;__Lib_PWM_150x.c,69 :: 		
;__Lib_PWM_150x.c,70 :: 		
0x0065	0x0020      	MOVLB      0
0x0066	0x151C      	BSF        TMR2ON_bit, BitPos(TMR2ON_bit+0)
;__Lib_PWM_150x.c,71 :: 		
0x0067	0x0021      	MOVLB      1
0x0068	0x110C      	BCF        TRISA2_bit, BitPos(TRISA2_bit+0)
;__Lib_PWM_150x.c,72 :: 		
0x0069	0x002C      	MOVLB      12
0x006A	0x1719      	BSF        PWM3OE_bit, BitPos(PWM3OE_bit+0)
;__Lib_PWM_150x.c,73 :: 		
0x006B	0x1799      	BSF        PWM3EN_bit, BitPos(PWM3EN_bit+0)
;__Lib_PWM_150x.c,74 :: 		
L_end_PWM3_Start:
0x006C	0x0008      	RETURN
; end of _PWM3_Start
_PWM1_Start:
;__Lib_PWM_150x.c,16 :: 		
;__Lib_PWM_150x.c,17 :: 		
0x006D	0x0020      	MOVLB      0
0x006E	0x151C      	BSF        TMR2ON_bit, BitPos(TMR2ON_bit+0)
;__Lib_PWM_150x.c,18 :: 		
0x006F	0x0021      	MOVLB      1
0x0070	0x128E      	BCF        TRISC5_bit, BitPos(TRISC5_bit+0)
;__Lib_PWM_150x.c,19 :: 		
0x0071	0x002C      	MOVLB      12
0x0072	0x1713      	BSF        PWM1OE_bit, BitPos(PWM1OE_bit+0)
;__Lib_PWM_150x.c,20 :: 		
0x0073	0x1793      	BSF        PWM1EN_bit, BitPos(PWM1EN_bit+0)
;__Lib_PWM_150x.c,21 :: 		
L_end_PWM1_Start:
0x0074	0x0008      	RETURN
; end of _PWM1_Start
_PWM2_Start:
;__Lib_PWM_150x.c,43 :: 		
;__Lib_PWM_150x.c,44 :: 		
0x0075	0x0020      	MOVLB      0
0x0076	0x151C      	BSF        TMR2ON_bit, BitPos(TMR2ON_bit+0)
;__Lib_PWM_150x.c,45 :: 		
0x0077	0x0021      	MOVLB      1
0x0078	0x118E      	BCF        TRISC3_bit, BitPos(TRISC3_bit+0)
;__Lib_PWM_150x.c,46 :: 		
0x0079	0x002C      	MOVLB      12
0x007A	0x1716      	BSF        PWM2OE_bit, BitPos(PWM2OE_bit+0)
;__Lib_PWM_150x.c,47 :: 		
0x007B	0x1796      	BSF        PWM2EN_bit, BitPos(PWM2EN_bit+0)
;__Lib_PWM_150x.c,48 :: 		
L_end_PWM2_Start:
0x007C	0x0008      	RETURN
; end of _PWM2_Start
_PWM3_Init:
;__Lib_PWM_150x.c,55 :: 		
;__Lib_PWM_150x.c,56 :: 		
0x007D	0x0021      	MOVLB      1
0x007E	0x150C      	BSF        TRISA2_bit, BitPos(TRISA2_bit+0)
;__Lib_PWM_150x.c,57 :: 		
0x007F	0x002C      	MOVLB      12
0x0080	0x0199      	CLRF       PWM3CON
;__Lib_PWM_150x.c,59 :: 		
0x0081	0x0198      	CLRF       PWM3DCH
;__Lib_PWM_150x.c,60 :: 		
0x0082	0x1317      	BCF        PWM3DCL0_bit, BitPos(PWM3DCL0_bit+0)
;__Lib_PWM_150x.c,61 :: 		
0x0083	0x1397      	BCF        PWM3DCL1_bit, BitPos(PWM3DCL1_bit+0)
;__Lib_PWM_150x.c,62 :: 		
L_end_PWM3_Init:
0x0084	0x0008      	RETURN
; end of _PWM3_Init
_PWM1_Set_Duty:
;__Lib_PWM_150x.c,11 :: 		
;__Lib_PWM_150x.c,12 :: 		
0x0085	0x0020      	MOVLB      0
0x0086	0x0827      	MOVF       FARG_PWM1_Set_Duty_new_duty, 0
0x0087	0x00F0      	MOVWF      R0
0x0088	0x0828      	MOVF       FARG_PWM1_Set_Duty_new_duty+1, 0
0x0089	0x00F1      	MOVWF      R1
0x008A	0x36F1      	LSRF       R1, 1
0x008B	0x0CF0      	RRF        R0, 1
0x008C	0x36F1      	LSRF       R1, 1
0x008D	0x0CF0      	RRF        R0, 1
0x008E	0x0870      	MOVF       R0, 0
0x008F	0x002C      	MOVLB      12
0x0090	0x0092      	MOVWF      PWM1DCH
;__Lib_PWM_150x.c,13 :: 		
0x0091	0x3006      	MOVLW      6
0x0092	0x00F1      	MOVWF      R1
0x0093	0x0020      	MOVLB      0
0x0094	0x0827      	MOVF       FARG_PWM1_Set_Duty_new_duty, 0
0x0095	0x00F0      	MOVWF      R0
0x0096	0x0871      	MOVF       R1, 0
L__PWM1_Set_Duty2:
0x0097	0x1903      	BTFSC      STATUS, 2
0x0098	0x289C      	GOTO       L__PWM1_Set_Duty3
0x0099	0x35F0      	LSLF       R0, 1
0x009A	0x3EFF      	ADDLW      255
0x009B	0x2897      	GOTO       L__PWM1_Set_Duty2
L__PWM1_Set_Duty3:
0x009C	0x0870      	MOVF       R0, 0
0x009D	0x002C      	MOVLB      12
0x009E	0x0491      	IORWF       PWM1DCL, 1
;__Lib_PWM_150x.c,14 :: 		
L_end_PWM1_Set_Duty:
0x009F	0x0008      	RETURN
; end of _PWM1_Set_Duty
_PWM2_Set_Duty:
;__Lib_PWM_150x.c,38 :: 		
;__Lib_PWM_150x.c,39 :: 		
0x00A0	0x0020      	MOVLB      0
0x00A1	0x0827      	MOVF       FARG_PWM2_Set_Duty_new_duty, 0
0x00A2	0x00F0      	MOVWF      R0
0x00A3	0x0828      	MOVF       FARG_PWM2_Set_Duty_new_duty+1, 0
0x00A4	0x00F1      	MOVWF      R1
0x00A5	0x36F1      	LSRF       R1, 1
0x00A6	0x0CF0      	RRF        R0, 1
0x00A7	0x36F1      	LSRF       R1, 1
0x00A8	0x0CF0      	RRF        R0, 1
0x00A9	0x0870      	MOVF       R0, 0
0x00AA	0x002C      	MOVLB      12
0x00AB	0x0095      	MOVWF      PWM2DCH
;__Lib_PWM_150x.c,40 :: 		
0x00AC	0x3006      	MOVLW      6
0x00AD	0x00F1      	MOVWF      R1
0x00AE	0x0020      	MOVLB      0
0x00AF	0x0827      	MOVF       FARG_PWM2_Set_Duty_new_duty, 0
0x00B0	0x00F0      	MOVWF      R0
0x00B1	0x0871      	MOVF       R1, 0
L__PWM2_Set_Duty8:
0x00B2	0x1903      	BTFSC      STATUS, 2
0x00B3	0x28B7      	GOTO       L__PWM2_Set_Duty9
0x00B4	0x35F0      	LSLF       R0, 1
0x00B5	0x3EFF      	ADDLW      255
0x00B6	0x28B2      	GOTO       L__PWM2_Set_Duty8
L__PWM2_Set_Duty9:
0x00B7	0x0870      	MOVF       R0, 0
0x00B8	0x002C      	MOVLB      12
0x00B9	0x0494      	IORWF       PWM2DCL, 1
;__Lib_PWM_150x.c,41 :: 		
L_end_PWM2_Set_Duty:
0x00BA	0x0008      	RETURN
; end of _PWM2_Set_Duty
_PWM3_Set_Duty:
;__Lib_PWM_150x.c,64 :: 		
;__Lib_PWM_150x.c,65 :: 		
0x00BB	0x0020      	MOVLB      0
0x00BC	0x0827      	MOVF       FARG_PWM3_Set_Duty_new_duty, 0
0x00BD	0x00F0      	MOVWF      R0
0x00BE	0x0828      	MOVF       FARG_PWM3_Set_Duty_new_duty+1, 0
0x00BF	0x00F1      	MOVWF      R1
0x00C0	0x36F1      	LSRF       R1, 1
0x00C1	0x0CF0      	RRF        R0, 1
0x00C2	0x36F1      	LSRF       R1, 1
0x00C3	0x0CF0      	RRF        R0, 1
0x00C4	0x0870      	MOVF       R0, 0
0x00C5	0x002C      	MOVLB      12
0x00C6	0x0098      	MOVWF      PWM3DCH
;__Lib_PWM_150x.c,66 :: 		
0x00C7	0x3006      	MOVLW      6
0x00C8	0x00F1      	MOVWF      R1
0x00C9	0x0020      	MOVLB      0
0x00CA	0x0827      	MOVF       FARG_PWM3_Set_Duty_new_duty, 0
0x00CB	0x00F0      	MOVWF      R0
0x00CC	0x0871      	MOVF       R1, 0
L__PWM3_Set_Duty14:
0x00CD	0x1903      	BTFSC      STATUS, 2
0x00CE	0x28D2      	GOTO       L__PWM3_Set_Duty15
0x00CF	0x35F0      	LSLF       R0, 1
0x00D0	0x3EFF      	ADDLW      255
0x00D1	0x28CD      	GOTO       L__PWM3_Set_Duty14
L__PWM3_Set_Duty15:
0x00D2	0x0870      	MOVF       R0, 0
0x00D3	0x002C      	MOVLB      12
0x00D4	0x0497      	IORWF       PWM3DCL, 1
;__Lib_PWM_150x.c,67 :: 		
L_end_PWM3_Set_Duty:
0x00D5	0x0008      	RETURN
; end of _PWM3_Set_Duty
___CC2DW:
;__Lib_System.c,71 :: 		
;__Lib_System.c,73 :: 		
_CC2DL_Loop1:
;__Lib_System.c,74 :: 		
0x00D6	0x0012      	MOVIW      FSR0++ 
;__Lib_System.c,75 :: 		
0x00D7	0x001E      	MOVWI      FSR1++ 
;__Lib_System.c,76 :: 		
0x00D8	0x03F0      	DECF       R0, 1
;__Lib_System.c,77 :: 		
0x00D9	0x1D03      	BTFSS      STATUS, 2
;__Lib_System.c,78 :: 		
0x00DA	0x28D6      	GOTO       _CC2DL_Loop1
;__Lib_System.c,79 :: 		
0x00DB	0x03F1      	DECF       R1, 1
;__Lib_System.c,80 :: 		
0x00DC	0x1D03      	BTFSS      STATUS, 2
;__Lib_System.c,81 :: 		
0x00DD	0x28D6      	GOTO       _CC2DL_Loop1
;__Lib_System.c,83 :: 		
L_end___CC2DW:
0x00DE	0x0008      	RETURN
; end of ___CC2DW
_Mul_8x8_U:
;__Lib_Math.c,103 :: 		
;__Lib_Math.c,109 :: 		
0x00DF	0x0020      	MOVLB      0
;__Lib_Math.c,110 :: 		
0x00E0	0x0870      	MOVF       R0, 0
;__Lib_Math.c,111 :: 		
0x00E1	0x00F1      	MOVWF      R1
;__Lib_Math.c,112 :: 		
0x00E2	0x01F0      	CLRF       R0
;__Lib_Math.c,113 :: 		
0x00E3	0x3008      	MOVLW      8
;__Lib_Math.c,114 :: 		
0x00E4	0x00FC      	MOVWF      R12
;__Lib_Math.c,115 :: 		
0x00E5	0x0871      	MOVF       R1, 0
;__Lib_Math.c,116 :: 		
0x00E6	0x0CF4      	RRF        R4, 1
;__Lib_Math.c,117 :: 		
0x00E7	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,118 :: 		
0x00E8	0x28ED      	GOTO       $+5
;__Lib_Math.c,119 :: 		
0x00E9	0x0BFC      	DECFSZ     R12, 1
;__Lib_Math.c,120 :: 		
0x00EA	0x28E6      	GOTO       $-4
;__Lib_Math.c,121 :: 		
0x00EB	0x01F1      	CLRF       R1
;__Lib_Math.c,122 :: 		
0x00EC	0x3400      	RETLW      0
;__Lib_Math.c,123 :: 		
0x00ED	0x1003      	BCF        STATUS, 0
;__Lib_Math.c,124 :: 		
0x00EE	0x28F2      	GOTO       $+4
;__Lib_Math.c,125 :: 		
0x00EF	0x0CF4      	RRF        R4, 1
;__Lib_Math.c,126 :: 		
0x00F0	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,127 :: 		
0x00F1	0x07F1      	ADDWF      R1, 1
;__Lib_Math.c,128 :: 		
0x00F2	0x0CF1      	RRF        R1, 1
;__Lib_Math.c,129 :: 		
0x00F3	0x0CF0      	RRF        R0, 1
;__Lib_Math.c,130 :: 		
0x00F4	0x0BFC      	DECFSZ     R12, 1
;__Lib_Math.c,131 :: 		
0x00F5	0x28EF      	GOTO       $-6
;__Lib_Math.c,133 :: 		
;__Lib_Math.c,134 :: 		
L_end_Mul_8x8_U:
0x00F6	0x0008      	RETURN
; end of _Mul_8x8_U
_PWM_init:
;Slave.c,27 :: 		void PWM_init()
;Slave.c,29 :: 		PWM1_Init(500);
0x00F7	0x0020      	MOVLB      0
0x00F8	0x141C      	BSF        T2CON, 0
0x00F9	0x149C      	BSF        T2CON, 1
0x00FA	0x30F9      	MOVLW      249
0x00FB	0x009B      	MOVWF      PR2
0x00FC	0x2055      	CALL       _PWM1_Init
;Slave.c,30 :: 		PWM2_Init(500);
0x00FD	0x0020      	MOVLB      0
0x00FE	0x141C      	BSF        T2CON, 0
0x00FF	0x149C      	BSF        T2CON, 1
0x0100	0x30F9      	MOVLW      249
0x0101	0x009B      	MOVWF      PR2
0x0102	0x205D      	CALL       _PWM2_Init
;Slave.c,31 :: 		PWM3_Init(500);
0x0103	0x0020      	MOVLB      0
0x0104	0x141C      	BSF        T2CON, 0
0x0105	0x149C      	BSF        T2CON, 1
0x0106	0x30F9      	MOVLW      249
0x0107	0x009B      	MOVWF      PR2
0x0108	0x207D      	CALL       _PWM3_Init
;Slave.c,32 :: 		PWM1_Start();
0x0109	0x206D      	CALL       _PWM1_Start
;Slave.c,33 :: 		PWM2_Start();
0x010A	0x2075      	CALL       _PWM2_Start
;Slave.c,34 :: 		PWM3_Start();
0x010B	0x2065      	CALL       _PWM3_Start
;Slave.c,35 :: 		}
L_end_PWM_init:
0x010C	0x0008      	RETURN
; end of _PWM_init
_Init:
;Slave.c,13 :: 		void Init(){
;Slave.c,14 :: 		ADCON1 = 0;                          // All ports set to digital
0x010D	0x0021      	MOVLB      1
0x010E	0x019E      	CLRF       ADCON1
;Slave.c,15 :: 		TRISA = 0;                           // Set PORTA as output
0x010F	0x018C      	CLRF       TRISA
;Slave.c,16 :: 		TRISC = 0x03;                        // Set PORTC as input
0x0110	0x3003      	MOVLW      3
0x0111	0x008E      	MOVWF      TRISC
;Slave.c,17 :: 		SSPADD =  Addy;                      // Get address (7bit). Lsb is read/write flag
0x0112	0x30D2      	MOVLW      210
0x0113	0x0024      	MOVLB      4
0x0114	0x0092      	MOVWF      SSPADD
;Slave.c,18 :: 		SSPCON = 0x36;                       // Set to I2C slave with 7-bit address
0x0115	0x3036      	MOVLW      54
0x0116	0x0095      	MOVWF      SSPCON
;Slave.c,19 :: 		INTCON = 0xC0;                       // enable INTCON.GIE
0x0117	0x30C0      	MOVLW      192
0x0118	0x008B      	MOVWF      INTCON
;Slave.c,20 :: 		INTCON.GIE = 1;
0x0119	0x178B      	BSF        INTCON, 7
;Slave.c,21 :: 		INTCON.PEIE = 1;
0x011A	0x170B      	BSF        INTCON, 6
;Slave.c,22 :: 		PIE1.SSP1IE = 1;                      // enable SSP interrupts
0x011B	0x0021      	MOVLB      1
0x011C	0x1591      	BSF        PIE1, 3
;Slave.c,23 :: 		PIE1.TMR1IE = 1;
0x011D	0x1411      	BSF        PIE1, 0
;Slave.c,24 :: 		PIR1.TMR1IF = 0;
0x011E	0x0020      	MOVLB      0
0x011F	0x1011      	BCF        PIR1, 0
;Slave.c,25 :: 		PIR1.SSP1IF = 0;
0x0120	0x1191      	BCF        PIR1, 3
;Slave.c,26 :: 		}
L_end_Init:
0x0121	0x0008      	RETURN
; end of _Init
_main:
0x0122	0x0020      	MOVLB      0
0x0123	0x01A2      	CLRF       _pos
;Slave.c,67 :: 		void main()
;Slave.c,70 :: 		Init();
0x0124	0x210D      	CALL       _Init
;Slave.c,71 :: 		PWM_init();
0x0125	0x20F7      	CALL       _PWM_init
;Slave.c,73 :: 		while(1)
L_main5:
;Slave.c,75 :: 		if(rxbuff[0]==1){PWM1_Set_Duty(rxbuff[1]*100);}
0x0126	0x0020      	MOVLB      0
0x0127	0x0824      	MOVF       _rxbuff, 0
0x0128	0x3A01      	XORLW      1
0x0129	0x1D03      	BTFSS      STATUS, 2
0x012A	0x2936      	GOTO       L_main7
0x012B	0x0825      	MOVF       _rxbuff+1, 0
0x012C	0x00F0      	MOVWF      R0
0x012D	0x3064      	MOVLW      100
0x012E	0x00F4      	MOVWF      R4
0x012F	0x20DF      	CALL       _Mul_8x8_U
0x0130	0x0870      	MOVF       R0, 0
0x0131	0x00A7      	MOVWF      FARG_PWM1_Set_Duty_new_duty
0x0132	0x0871      	MOVF       R1, 0
0x0133	0x00A8      	MOVWF      FARG_PWM1_Set_Duty_new_duty+1
0x0134	0x2085      	CALL       _PWM1_Set_Duty
0x0135	0x2955      	GOTO       L_main8
L_main7:
;Slave.c,76 :: 		else if(rxbuff[0]==2){ PWM2_Set_Duty(rxbuff[1]*100);}
0x0136	0x0020      	MOVLB      0
0x0137	0x0824      	MOVF       _rxbuff, 0
0x0138	0x3A02      	XORLW      2
0x0139	0x1D03      	BTFSS      STATUS, 2
0x013A	0x2946      	GOTO       L_main9
0x013B	0x0825      	MOVF       _rxbuff+1, 0
0x013C	0x00F0      	MOVWF      R0
0x013D	0x3064      	MOVLW      100
0x013E	0x00F4      	MOVWF      R4
0x013F	0x20DF      	CALL       _Mul_8x8_U
0x0140	0x0870      	MOVF       R0, 0
0x0141	0x00A7      	MOVWF      FARG_PWM2_Set_Duty_new_duty
0x0142	0x0871      	MOVF       R1, 0
0x0143	0x00A8      	MOVWF      FARG_PWM2_Set_Duty_new_duty+1
0x0144	0x20A0      	CALL       _PWM2_Set_Duty
0x0145	0x2955      	GOTO       L_main10
L_main9:
;Slave.c,77 :: 		else if(rxbuff[0]==3){ PWM3_Set_Duty(rxbuff[1]*100);}
0x0146	0x0020      	MOVLB      0
0x0147	0x0824      	MOVF       _rxbuff, 0
0x0148	0x3A03      	XORLW      3
0x0149	0x1D03      	BTFSS      STATUS, 2
0x014A	0x2955      	GOTO       L_main11
0x014B	0x0825      	MOVF       _rxbuff+1, 0
0x014C	0x00F0      	MOVWF      R0
0x014D	0x3064      	MOVLW      100
0x014E	0x00F4      	MOVWF      R4
0x014F	0x20DF      	CALL       _Mul_8x8_U
0x0150	0x0870      	MOVF       R0, 0
0x0151	0x00A7      	MOVWF      FARG_PWM3_Set_Duty_new_duty
0x0152	0x0871      	MOVF       R1, 0
0x0153	0x00A8      	MOVWF      FARG_PWM3_Set_Duty_new_duty+1
0x0154	0x20BB      	CALL       _PWM3_Set_Duty
L_main11:
L_main10:
L_main8:
;Slave.c,79 :: 		}
0x0155	0x2926      	GOTO       L_main5
;Slave.c,80 :: 		}
L_end_main:
0x0156	0x2956      	GOTO       $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0004      [81]    _interrupt
0x0055       [8]    _PWM1_Init
0x005D       [8]    _PWM2_Init
0x0065       [8]    _PWM3_Start
0x006D       [8]    _PWM1_Start
0x0075       [8]    _PWM2_Start
0x007D       [8]    _PWM3_Init
0x0085      [27]    _PWM1_Set_Duty
0x00A0      [27]    _PWM2_Set_Duty
0x00BB      [27]    _PWM3_Set_Duty
0x00D6       [9]    ___CC2DW
0x00DF      [24]    _Mul_8x8_U
0x00F7      [22]    _PWM_init
0x010D      [21]    _Init
0x0122      [53]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    INDF0
0x0001       [1]    INDF1
0x0003       [1]    STATUS
0x0004       [1]    FSR0L
0x0005       [1]    FSR0H
0x0006       [1]    FSR1L
0x0007       [1]    FSR1H
0x000A       [1]    PCLATH
0x000B       [1]    INTCON
0x0011       [1]    PIR1
0x001B       [1]    PR2
0x001C       [1]    T2CON
0x001C       [0]    TMR2ON_bit
0x0022       [1]    _pos
0x0023       [1]    _j
0x0024       [2]    _rxbuff
0x0026       [1]    _tx_data
0x0027       [2]    FARG_PWM1_Set_Duty_new_duty
0x0027       [2]    FARG_PWM3_Set_Duty_new_duty
0x0027       [2]    FARG_PWM2_Set_Duty_new_duty
0x0029       [4]    FARG_PWM3_Init_PWM_Freq
0x0029       [4]    FARG_PWM2_Init_PWM_Freq
0x0029       [4]    FARG_PWM1_Init_PWM_Freq
0x0070       [1]    R0
0x0071       [1]    R1
0x0072       [1]    R2
0x0073       [1]    R3
0x0074       [1]    R4
0x0075       [1]    R5
0x0076       [1]    R6
0x0077       [1]    R7
0x0078       [1]    R8
0x0079       [1]    R9
0x007A       [1]    R10
0x007B       [1]    R11
0x007C       [1]    R12
0x007D       [1]    R13
0x007E       [1]    R14
0x007F       [1]    R15
0x008C       [1]    TRISA
0x008C       [0]    TRISA2_bit
0x008E       [1]    TRISC
0x008E       [0]    TRISC3_bit
0x008E       [0]    TRISC5_bit
0x0091       [1]    PIE1
0x009E       [1]    ADCON1
0x0211       [1]    SSPBUF
0x0212       [1]    SSPADD
0x0214       [1]    SSPSTAT
0x0215       [1]    SSPCON
0x0611       [1]    PWM1DCL
0x0611       [0]    PWM1DCL0_bit
0x0611       [0]    PWM1DCL1_bit
0x0612       [1]    PWM1DCH
0x0613       [0]    PWM1EN_bit
0x0613       [1]    PWM1CON
0x0613       [0]    PWM1OE_bit
0x0614       [0]    PWM2DCL1_bit
0x0614       [0]    PWM2DCL0_bit
0x0614       [1]    PWM2DCL
0x0615       [1]    PWM2DCH
0x0616       [1]    PWM2CON
0x0616       [0]    PWM2OE_bit
0x0616       [0]    PWM2EN_bit
0x0617       [0]    PWM3DCL0_bit
0x0617       [0]    PWM3DCL1_bit
0x0617       [1]    PWM3DCL
0x0618       [1]    PWM3DCH
0x0619       [0]    PWM3EN_bit
0x0619       [1]    PWM3CON
0x0619       [0]    PWM3OE_bit
