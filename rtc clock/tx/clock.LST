C51 COMPILER V9.50a   CLOCK                                                                02/10/2017 00:00:37 PAGE 1   


C51 COMPILER V9.50a, COMPILATION OF MODULE CLOCK
OBJECT MODULE PLACED IN clock.OBJ
COMPILER INVOKED BY: E:\Keil\C51\BIN\C51.EXE clock.c BROWSE DEBUG OBJECTEXTEND

line level    source

*** WARNING C500 IN LINE 1 OF clock.c: LICENSE ERROR (R208: RENEW LICENSE ID CODE (LIC))

   1          #include<reg51.h>
   2          
   3          
   4          sbit set=P3^4;
   5          sbit mov=P3^3;
   6          sbit inc=P3^5;
   7          sbit dec=P3^6;
   8          sbit ent=P3^7;
   9          void all_disp();
  10          void time_set();
  11          
  12          
  13          #define First_Line 0x80
  14          #define Second_Line 0xc0
  15          #define Curser_On 0x0f
  16          #define Curser_Off 0x0c
  17          #define Clear_Display 0x01
  18          
  19          #define Data_Port P2
  20          
  21          sbit Lcd_rs = P0^5;
  22          sbit Lcd_rw = P0^4;
  23          sbit Lcd_en = P0^3;
  24          
  25          sbit sda_rtc =P0^7;
  26          sbit scl_rtc =P0^6;
  27          
  28          /*sbit Lcd_rs = P3^5;
  29          sbit Lcd_rw = P3^6;
  30          sbit Lcd_en = P3^7; */
  31          
  32          void Lcd8_Init();
  33          void Lcd8_Command(unsigned char);
  34          void Lcd8_Write(unsigned char,unsigned char);
  35          void Lcd8_Display(unsigned char,const unsigned char*,unsigned int);
  36          void Lcd8_Decimal2(unsigned char,unsigned char);
  37          void Delay(unsigned int);
  38          void del();
  39          void SerTx(unsigned char );
  40          
  41          #define DS1307_ID 0xD0
  42          #define SEC 0x00
  43          #define MIN 0x01
  44          #define HOUR 0x02
  45          #define DATE 0x04
  46          #define MONTH 0x05
  47          #define YEAR 0x06
  48          
  49          
  50          
  51          DS1307_get(unsigned char);
  52          void DS1307_settime(unsigned char, unsigned char, unsigned char);
  53          void DS1307_setdate(unsigned char, unsigned char, unsigned char);
  54          Send2lcd(unsigned char);
C51 COMPILER V9.50a   CLOCK                                                                02/10/2017 00:00:37 PAGE 2   

  55          void Rtc_Write(unsigned char,unsigned char);
  56          Rtc_Read(unsigned char);
  57          void Rtc_rd_wr_sub();
  58          void Rtc_Init();
  59          void Rtc_Start();
  60          void Rtc_Tx();
  61          void Rtc_Rx();
  62          void Rtc_Stop();
  63          void Rtc_Ack();
  64          
  65          
  66          unsigned int Rtc_add_wr,Rtc_add_rd;
  67          unsigned char d_rtc,datain_rtc,in_rtc,temp_rtc,dat_rtc,flag_rtc;
  68          
  69          unsigned char i,j,a[10],cur=0;
  70          unsigned char sec,hour,min,date,month,year,sec1,hour1,min1,sec2, hour2,min2,hh,mm,ss,dd,mn,yy;
  71          unsigned char count[6]={0x86,0x89,0x8c,0xc6,0xc9,0xcc};
  72          
  73          
  74          
  75          
  76          
  77          
  78          unsigned char dec_hex(unsigned char tt)
  79          {
  80   1      if(tt>59)
  81   1      tt+=36;
  82   1      else if(tt>49)
  83   1      tt+=30;
  84   1      else if(tt>39)
  85   1      tt+=24;
  86   1      else if(tt>29)
  87   1      tt+=18;
  88   1      else if(tt>19)
  89   1      tt+=12;
  90   1      else if(tt>9)
  91   1      tt+=6;
  92   1      return(tt);
  93   1      }
  94          
  95          void all_disp()
  96          {
  97   1      sec = DS1307_get(SEC);
  98   1      min = DS1307_get(MIN);
  99   1      hour = DS1307_get(HOUR);
 100   1      date = DS1307_get(DATE);
 101   1      month = DS1307_get(MONTH);
 102   1      year = DS1307_get(YEAR);
 103   1      
 104   1      sec=Send2lcd(sec);
 105   1      min=Send2lcd(min);
 106   1      hour=Send2lcd(hour);
 107   1      date=Send2lcd(date);
 108   1      month=Send2lcd(month);
 109   1      year=Send2lcd(year);
 110   1      
 111   1      
 112   1      Lcd8_Decimal2(0xc6,hour);
 113   1      SerTx(hour);
 114   1      
 115   1      Lcd8_Write(0xc8,'.');
 116   1      Lcd8_Decimal2(0xc9,min);
C51 COMPILER V9.50a   CLOCK                                                                02/10/2017 00:00:37 PAGE 3   

 117   1      SerTx(min);
 118   1      
 119   1      Lcd8_Write(0xcb,'.');
 120   1      Lcd8_Decimal2(0xcc,sec);
 121   1      SerTx(sec);
 122   1      }
 123          
 124          char p_sw_state[5]={0};
 125          volatile char sw_state=0xF0;
 126          
 127          
 128          void Check_Switch()
 129          {
 130   1        int i;
 131   1        char l_sw_state;
 132   1        l_sw_state=P3;
 133   1        l_sw_state>>=3;
 134   1      
 135   1        for(i=4;i>=0;i--)
 136   1        {
 137   2          if(!(l_sw_state&(1<<i)))
 138   2           {
 139   3             if(p_sw_state[i]==0)
 140   3                  {
 141   4                p_sw_state[i]=1;
 142   4                    sw_state^=(1<<i);
 143   4                  }      
 144   3               }
 145   2              if(p_sw_state[i]==2) p_sw_state[i]=0;
 146   2              if(l_sw_state&(1<<i))p_sw_state[i]=2; 
 147   2         }
 148   1      }
 149          void Disp_Switch()
 150          {
 151   1        int i,col_n=0xC0;
 152   1        
 153   1      
 154   1        for(i=4;i>=0;i--)
 155   1         {
 156   2           col_n=0xC0+(i*3);
 157   2           if(sw_state&(1<<i))
 158   2                {
 159   3              Lcd8_Write(col_n,'O');
 160   3                      Lcd8_Write(col_n+1,'N');
 161   3                }
 162   2               else
 163   2                {
 164   3                  Lcd8_Write(col_n,'O');
 165   3                      Lcd8_Write(col_n+1,'F');
 166   3                }
 167   2         }
 168   1      }
 169          
 170          void main()
 171          {
 172   1        int n=0;
 173   1              TMOD=0x20;
 174   1              TH1=0xFD;
 175   1              SCON=0X50;
 176   1              TR1=1; 
 177   1      Lcd8_Init();
 178   1      Lcd8_Display(0x80,"S1 S2 S3 S4 S5",15);
C51 COMPILER V9.50a   CLOCK                                                                02/10/2017 00:00:37 PAGE 4   

 179   1      while(1)
 180   1      {
 181   2      Check_Switch();
 182   2      Disp_Switch();
 183   2      if(n=100000)
*** WARNING C276 IN LINE 183 OF clock.c: constant in condition expression
 184   2      {
 185   3        SerTx('T');
 186   3        SerTx(sw_state);
 187   3        n=0;
 188   3      }
 189   2       n++;
 190   2      }
 191   1      /*Lcd8_Display(Second_Line,"Time:",5);*/
 192   1      /*Rtc_Init();*/ 
 193   1      
 194   1              
 195   1              
 196   1              
 197   1              
 198   1              
 199   1      //DS1307_setdate(0x04,0x11,0x11);
 200   1      //DS1307_settime(0x16,0x00,0x00);
 201   1      
 202   1      while(1)
 203   1      {
 204   2      SerTx('T');
 205   2      all_disp();
 206   2      if(!set)
 207   2      time_set();
 208   2      
 209   2      
 210   2      
 211   2      }
 212   1      }
 213          
 214          void SerTx(unsigned char x)
 215          {
 216   1      
 217   1      SBUF=x;
 218   1      while(TI==0);
 219   1      Delay(1000);
 220   1      //Delay(10000000);
 221   1      TI=0;
 222   1      
 223   1      
 224   1      }
 225          
 226          
 227          void time_set()
 228          {
 229   1      Lcd8_Display(0x80," TIME SET ",16);
 230   1      Lcd8_Display(0xc0," MODE ",16);
 231   1      Delay(65000);
 232   1      Lcd8_Command(0x01);
 233   1      Lcd8_Display(First_Line,"Date:",5);
 234   1      Lcd8_Display(Second_Line,"Time:",5);
 235   1      all_disp();
 236   1      
 237   1      cur=0;
 238   1      
 239   1      while(ent)
C51 COMPILER V9.50a   CLOCK                                                                02/10/2017 00:00:37 PAGE 5   

 240   1      {
 241   2      Lcd8_Command(0x0f);
 242   2      Lcd8_Command(count[cur]);
 243   2      if(mov==0)
 244   2      {
 245   3      while(!mov);
 246   3      cur++;
 247   3      if(cur==6)
 248   3      cur=0;
 249   3      }
 250   2      else if(count[cur]==0x86)
 251   2      {
 252   3      if(inc==0)
 253   3      {
 254   4      while(!inc);
 255   4      date++;
 256   4      if(date>=32)
 257   4      date=1;
 258   4      Lcd8_Decimal2(count[cur],date);
 259   4      }
 260   3      else if(dec==0)
 261   3      {
 262   4      while(!dec);
 263   4      date--;
 264   4      if(date==0xff)
 265   4      date=31;
 266   4      Lcd8_Decimal2(count[cur],date);
 267   4      }
 268   3      }
 269   2      
 270   2      else if(count[cur]==0x89)
 271   2      {
 272   3      if(inc==0)
 273   3      {
 274   4      while(!inc);
 275   4      month++;
 276   4      if(month>=13)
 277   4      month=1;
 278   4      Lcd8_Decimal2(count[cur],month);
 279   4      }
 280   3      else if(dec==0)
 281   3      {
 282   4      while(!dec);
 283   4      month--;
 284   4      if(month==0xff)
 285   4      month=12;
 286   4      Lcd8_Decimal2(count[cur],month);
 287   4      }
 288   3      }
 289   2      
 290   2      else if(count[cur]==0x8c)
 291   2      {
 292   3      if(inc==0)
 293   3      {
 294   4      while(!inc);
 295   4      year++;
 296   4      if(year>99)
 297   4      year=0;
 298   4      Lcd8_Decimal2(count[cur],year);
 299   4      }
 300   3      else if(dec==0)
 301   3      {
C51 COMPILER V9.50a   CLOCK                                                                02/10/2017 00:00:37 PAGE 6   

 302   4      while(!dec);
 303   4      year--;
 304   4      if(year==0xff)
 305   4      year=99;
 306   4      Lcd8_Decimal2(count[cur],year);
 307   4      }
 308   3      }
 309   2      
 310   2      else if(count[cur]==0xc6)
 311   2      {
 312   3      if(inc==0)
 313   3      {
 314   4      while(inc==0);
 315   4      hour++;
 316   4      if(hour>=24)
 317   4      hour=0;
 318   4      Lcd8_Decimal2(count[cur],hour);
 319   4      }
 320   3      else if(dec==0)
 321   3      {
 322   4      while(dec==0);
 323   4      hour--;
 324   4      if(hour==0)
 325   4      hour=23;
 326   4      Lcd8_Decimal2(count[cur],hour);
 327   4      }
 328   3      }
 329   2      
 330   2      else if(count[cur]==0xc9)
 331   2      {
 332   3      if(inc==0)
 333   3      {
 334   4      while(inc==0);
 335   4      min++;
 336   4      if(min>=60)
 337   4      min=0;
 338   4      Lcd8_Decimal2(count[cur],min);
 339   4      }
 340   3      else if(dec==0)
 341   3      {
 342   4      while(dec==0);
 343   4      min--;
 344   4      if(min==0)
 345   4      min=59;
 346   4      Lcd8_Decimal2(count[cur],min);
 347   4      }
 348   3      }
 349   2      
 350   2      else if(count[cur]==0xcc)
 351   2      {
 352   3      if(inc==0)
 353   3      {
 354   4      while(inc==0);
 355   4      Lcd8_Command(0x0c);
 356   4      sec++;
 357   4      if(sec>=60)
 358   4      sec=0;
 359   4      Lcd8_Decimal2(count[cur],sec);
 360   4      }
 361   3      else if(dec==0)
 362   3      {
 363   4      while(dec==0);
C51 COMPILER V9.50a   CLOCK                                                                02/10/2017 00:00:37 PAGE 7   

 364   4      Lcd8_Command(0x0c);
 365   4      sec--;
 366   4      if(sec==0xff)
 367   4      sec=59;
 368   4      Lcd8_Decimal2(count[cur],sec);
 369   4      }
 370   3      }
 371   2      }
 372   1      
 373   1      
 374   1      Lcd8_Command(0x0c);
 375   1      Lcd8_Display(0x80," TIME IS ",16);
 376   1      Lcd8_Display(0xc0," STORED ",16);
 377   1      Delay(65000);Delay(65000);
 378   1      
 379   1      dd=dec_hex(date);
 380   1      mn=dec_hex(month);
 381   1      yy=dec_hex(year);
 382   1      hh=dec_hex(hour);
 383   1      mm=dec_hex(min);
 384   1      ss=dec_hex(sec);
 385   1      
 386   1      DS1307_settime(hh,mm,ss);
 387   1      DS1307_setdate(dd,mn,yy);
 388   1      Lcd8_Command(0x01);
 389   1      Lcd8_Display(First_Line,"Date:",5);
 390   1      Lcd8_Display(Second_Line,"Time:",5);
 391   1      Delay(65000);
 392   1      
 393   1      }
 394          
 395          
 396          
 397          
 398          void Lcd8_Init()
 399          {
 400   1      Lcd8_Command(0x38); //to select function set
 401   1      Lcd8_Command(0x06); //entry mode set
 402   1      Lcd8_Command(0x0c); //display on
 403   1      Lcd8_Command(0x01); //clear display
 404   1      
 405   1      }
 406          
 407          void Lcd8_Command(unsigned char com)
 408          {
 409   1      
 410   1      Data_Port=com;
 411   1      Lcd_en=1;
 412   1      Lcd_rs=Lcd_rw=0;
 413   1      Delay(125);
 414   1      Lcd_en=0;
 415   1      Delay(125);
 416   1      
 417   1      
 418   1      }
 419          
 420          void Lcd8_Write(unsigned char com,unsigned char lr)
 421          {
 422   1      Lcd8_Command(com);
 423   1      Data_Port=lr;// Data
 424   1      Lcd_en=Lcd_rs=1;
 425   1      Lcd_rw=0;
C51 COMPILER V9.50a   CLOCK                                                                02/10/2017 00:00:37 PAGE 8   

 426   1      Delay(125);
 427   1      Lcd_en=0;
 428   1      Delay(125);
 429   1      
 430   1      
 431   1      
 432   1      }
 433          
 434          void Lcd8_Display(unsigned char com,const unsigned char *word,unsigned int n)
 435          {
 436   1      unsigned char Lcd_i;
 437   1      for(Lcd_i=0;Lcd_i<n;Lcd_i++)
 438   1      {
 439   2      Lcd8_Write(com+Lcd_i,word[Lcd_i]);
 440   2      
 441   2      }
 442   1      }
 443          
 444          void Lcd8_Decimal2(unsigned char com,unsigned char val)
 445          {
 446   1      unsigned int Lcd_hr,Lcd_t,Lcd_o;
 447   1      
 448   1      Lcd_hr=val%100;
 449   1      Lcd_t=Lcd_hr/10;
 450   1      Lcd_o=Lcd_hr%10;
 451   1      
 452   1      Lcd8_Write(com,Lcd_t+0x30);
 453   1      Lcd8_Write(com+1,Lcd_o+0x30);
 454   1      
 455   1      }
 456          
 457          
 458          
 459          
 460          
 461          
 462          void Delay(unsigned int del)
 463          {
 464   1      while(del--);
 465   1      }
 466          
 467          void del()
 468          {
 469   1      Delay(65000);
 470   1      Delay(65000);
 471   1              
 472   1      }
 473          
 474          
 475          /*********************************LCD HEADER FILE END*************************************/
 476          
 477          
 478          
 479          /*********************************RTC HEADER FILE START*********************************/
 480          
 481          
 482          DS1307_get(unsigned char addr)
 483          {
 484   1      unsigned char ret;
 485   1      
 486   1      Rtc_Start();
 487   1      ret = Rtc_Read(addr);
C51 COMPILER V9.50a   CLOCK                                                                02/10/2017 00:00:37 PAGE 9   

 488   1      Rtc_Stop();
 489   1      
 490   1      
 491   1      return ret;
 492   1      }
 493          
 494          void DS1307_settime(unsigned char hh, unsigned char mm, unsigned char ss)
 495          {
 496   1      Rtc_Start();
 497   1      
 498   1      Rtc_Write(0x00,ss); /* Write sec on RAM address 00H */
 499   1      Rtc_Write(0x01,mm); /* Write min on RAM address 01H */
 500   1      Rtc_Write(0x02,hh); /* Write hour on RAM address 02H */
 501   1      
 502   1      Rtc_Stop(); /* Stop i2c bus */
 503   1      }
 504          
 505          
 506          void DS1307_setdate(unsigned char dd, unsigned char mm, unsigned char yy)
 507          {
 508   1      Rtc_Start();
 509   1      
 510   1      Rtc_Write(0x04,dd); /* Write date on RAM address 04H */
 511   1      Rtc_Write(0x05,mm); /* Write month on RAM address 05H */
 512   1      Rtc_Write(0x06,yy); /* Write year on RAM address 06H */
 513   1      
 514   1      Rtc_Stop(); /* Stop i2c bus */
 515   1      }
 516          
 517          
 518          Send2lcd(unsigned char value)
 519          {
 520   1      unsigned char buf1,buf2,buf = 0;
 521   1      
 522   1      buf1 = value & 0xF0; /* Filter for high byte */
 523   1      buf1 = (buf1>>4); /* Convert to ascii code */
 524   1      buf2 = value & 0x0F; /* Filter for low byte */
 525   1      buf=(buf1*10)+buf2;
 526   1      
 527   1      
 528   1      return buf;
 529   1      }
 530          
 531          
 532          void Rtc_Init()//lower order 256 bytes of the chip
 533          {
 534   1      Rtc_add_wr=0xd0;
 535   1      Rtc_add_rd=0xd1;
 536   1      }
 537          
 538          
 539          void Rtc_Write(unsigned char zig,unsigned char zag)// program to write to EEPROM
 540          {
 541   1      dat_rtc=zig;
 542   1      temp_rtc=zag;
 543   1      Rtc_rd_wr_sub();
 544   1      above:
 545   1      d_rtc=temp_rtc;
 546   1      Rtc_Tx();
 547   1      if (CY==1)goto above;
 548   1      CY=0;
 549   1              
C51 COMPILER V9.50a   CLOCK                                                                02/10/2017 00:00:37 PAGE 10  

 550   1      Rtc_Stop();
 551   1      }
 552          
 553          
 554          Rtc_Read(unsigned char zig)// program to read from EEPROM
 555          {
 556   1      dat_rtc=zig;
 557   1      Rtc_rd_wr_sub();
 558   1      Rtc_Start();
 559   1      be:
 560   1      d_rtc=Rtc_add_rd; // 0xd1 =Rtc_add_rd
 561   1      Rtc_Tx();
 562   1      if(CY==1)goto be;
 563   1      Rtc_Rx();
 564   1      Rtc_Ack();
 565   1      CY=0;
 566   1      Rtc_Stop();
 567   1      
 568   1      return(datain_rtc);
 569   1      }
 570          
 571          
 572          void Rtc_Start()// must for any operation on EEPROM
 573          {
 574   1      sda_rtc=1;
 575   1      scl_rtc=1;
 576   1      sda_rtc=0;
 577   1      scl_rtc=0;
 578   1      }
 579          
 580          
 581          void Rtc_Stop()// this is similar to the START operation whereas this should be performed after the comple
             -tion of any operation
 582          {
 583   1      sda_rtc=0;
 584   1      scl_rtc=1;
 585   1      sda_rtc=1;
 586   1      }
 587          
 588          
 589          void Rtc_Tx()// program to send the device address, read/write address,data to be written
 590          {
 591   1      signed char i_rtc;
 592   1      for(i_rtc=7;i_rtc>=0;i_rtc--)// should necessarily be initialised as signed char.
 593   1      {
 594   2      CY=(d_rtc>>i_rtc)&0x01;
 595   2      sda_rtc=CY;
 596   2      scl_rtc=1;// clock is essential inorder to write or read
 597   2      scl_rtc=0;// clk should be alternated
 598   2      }
 599   1      sda_rtc=1;
 600   1      scl_rtc=1;
 601   1      CY=sda_rtc;
 602   1      scl_rtc=0;
 603   1      
 604   1      }
 605          
 606          
 607          void Rtc_Rx()// program read the data from the EEPROM
 608          {
 609   1      unsigned char l_rtc;
 610   1      sda_rtc=1;
C51 COMPILER V9.50a   CLOCK                                                                02/10/2017 00:00:37 PAGE 11  

 611   1      for (l_rtc=0;l_rtc<=7;l_rtc++)
 612   1      {
 613   2      scl_rtc=1;
 614   2      in_rtc=in_rtc<<1;
 615   2      in_rtc|=sda_rtc;
 616   2      scl_rtc=0;
 617   2      }
 618   1      datain_rtc=in_rtc;
 619   1      in_rtc=0;
 620   1      }
 621          
 622          
 623          void Rtc_Ack()// this is to intimate the EEPROM that the read operation is over
 624          {
 625   1      sda_rtc=1;
 626   1      scl_rtc=1;
 627   1      scl_rtc=0;
 628   1      }
 629          
 630          
 631          void Rtc_rd_wr_sub()// this routine will be used by both the read & write operations to send the device ad
             -dress & the address at which the corresponding action is to be taken
 632          {
 633   1      Rtc_Start();
 634   1      here1:
 635   1      d_rtc=Rtc_add_wr;// 0xd0 device address is passed
 636   1      Rtc_Tx();
 637   1      if(CY==1)goto here1;
 638   1      again1:
 639   1      d_rtc=dat_rtc;// the address from which data is to be read/written is to be passed
 640   1      Rtc_Tx();
 641   1      if(CY==1)goto again1;
 642   1              
 643   1      }
 644          
 645          
 646                  


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1687    ----
   CONSTANT SIZE    =     64    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     53      25
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
